---
title: "CWC data simulation"
author: "Nina Joyce"
format: 
  html:
    toc: true
    page-layout: full
    df-print: kable
editor: visual
---

## The simulation

The goal is to simulate data that can be used to examine the Clone-Weight-Censor (CWC) method. Thus, we need a data set with the following properties.

-   **Longitudinal:** A panel data set with enough time periods to allow for some complexity in the grace period and post-grace period censoring.

-   **A treatment strategy that is:**

    -   **Sustained -** A treatment that can hypothetically change over time (e.g., not a surgery). Note that this is only because we want to incorporate post-grace period censoring and for the per-protocol effect to differ from the intention-to-treat (their observational analogues).

    -   **Time varying -** A treatment that can turn on or off. To keep it simple we will have the treatment turn on or off one time at most.

    -   **Subject to possible immortal time bias:** The Cain, et al. paper uses a dynamic treatment regime. We will simulate something much simpler - a treatment strategy with a specified grace period.

-   **Non-random censoring:** We need censoring to occur both in and outside the grace period.

### Simulate longitudinal data

We'll start with 1,000 individuals, 10 time periods, and a grace period of 4 time periods. There will be two baseline covariates, X and W.

```{r}
#| output: false
rm(list=ls())
library(tidyverse)

set.seed(04192020)

# Number of individuals
N <- 10000

# Number of time periods
J <- 10

# Grace period
G <- 4

# ID numbers
ID <- seq(1:N)

# Simulate baseline confounders
X <- rbinom(N, 1, 0.3)
W <- rbinom(N, 1, 0.7)
```

### Simulate exposure

Next, we will simulate the exposure. We will define treatment strategy as "initiate treatment within first four time periods and stay on treatment through time period 10", and "do not initiate treatment within the first four time periods and remain off treatment through time period 10."

We will assume that everyone assigned to the treatment strategy initiates within the first four time periods and thus any non-compliance with treatment strategy is due to initiation or discontinuation after the grace period.

We start by modeling the probability of initaiting the treatment in the grace period and then assign probabilities of switching in each time period after the grace period. Note that this variable, Agrace, is like our "new user" "never user" variable, because it indicates who initiated within the grace period.

```{r}

# Simulate treatment initiation in the grace period (yes/no)
Agrace <- rbinom(N, 1, plogis(-1 + 3*X - 2*W))

# For all individuals who initiate, assign uniform distribution for treatment start time within 
Astart <- ifelse(Agrace==1, sample(1:4, N, replace=T), NA)

# Create indicator of time period in which exposure changes for all A (must occur after the grace period)
Aswitch <- sample(5:11, N, prob = c(0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.78), replace=T)
```

### Create "long" data set

Next, put all the variables together and expand the data set to a long data set, creating a time-period indicator

```{r}

#note: usually would do all these in one step, but keeping them separate (i.e., df.1-6) for illustration purposes
# Create a dataframe 
df.1 <- data.frame(ID, Agrace, Astart, Aswitch, X, W) 


# Expand to long
df.2 <- df.1 %>%
  group_by(ID) %>%
  slice(rep(1:n(), each = J)) %>%
  mutate(time_period = 1:n())%>%
  ungroup()
```

### Create time-varying exposure

Create an indicator variable, A, for the time varying treatment. Note that A will be equal to Agrace except in the time periods before initiation (when Astart\<time_period) and after switching (when Aswitch\>= time_period)

```{r}
# Create A - time varying indicator of treatment
df.3 <- df.2 %>%
  mutate(A = ifelse((time_period >= Astart | is.na(Astart)) & time_period< Aswitch, Agrace, 1-Agrace)) %>%
  select(ID, time_period, Agrace, A, W, X)

```

### Simulate outcomes

Simulate the hazard of the outcome that is a function of time (and the treatment and confounders).

```{r}

#note, originally was modeling survival and uncensoring, so just took 1-prob. will clean up later
df.4 <- df.3 %>% 
  mutate(hazard_prob =  1-plogis(3 - (2 * A) + (0.03 * time_period) + (0.3 * X) - (0.4 * W)),
         cens_prob = 1 - plogis(4 + (0.5 * A) + (0.008 * time_period) - (2 * X)))


# Hazard of event. Once outcome occurs, all future outcomes are 9 (<- convert to NA in later step b/c otherwise variable is logical, not numeric)
for (i in 1:nrow(df.4)) {
   
   if (df.4$time_period[i]==1) {
     df.4$event[i] <- rbinom(1, 1, df.4$hazard_prob[i])
   } else { if (df.4$time_period[i]>1) {
         if (df.4$event[i-1] == 0) {
           df.4$event [i] <- rbinom(1, 1, df.4$hazard_prob[i])
         } else if (df.4$event[i-1] == 1) {
           df.4$event[i] <- 9
         } else if (df.4$event[i-1]==9) {
           df.4$event[i] <- 9
         }
       }
    }
} 

# Hazard of censoring
for (i in 1:nrow(df.4)) {
   if (df.4$time_period[i]==1) {
     df.4$censor[i] <- rbinom(1, 1, df.4$cens_prob[i])
   } else { if (df.4$time_period[i]>1) {
         if (df.4$censor[i-1] == 0) {
           df.4$censor [i] <- rbinom(1, 1, df.4$cens_prob[i])
         } else if (df.4$censor[i-1] == 1) {
           df.4$censor[i] <- 9
         } else if (df.4$censor[i-1]==9) {
           df.4$censor[i] <- 9
         }
       }
    }
} 

# Replace 9 with NA
df.5 <- df.4 %>%
  mutate(event = ifelse(event==9, NA, event),
         censor = ifelse(censor==9, NA, censor))

# select event and censoring time
event.time <- df.5 %>%
  filter(event==1) %>%
  select(ID, event_time=time_period)

cens.time <- df.5 %>%
  filter(censor==1) %>%
  select(ID, cens_time=time_period)

# Merge back on to dataset and create outcome variable (Y) that is subject to censoring 
# (note that when the censoring and event times are the same, censoring "wins")
df.6 <- df.5 %>%
  left_join(event.time, by="ID") %>%
  left_join(cens.time, by="ID") %>%
  mutate(event_time = ifelse(is.na(event_time), 11, event_time),
         cens_time = ifelse(is.na(cens_time), 11, cens_time),
         end_time = pmin(event_time, cens_time, J+1),
         Y = ifelse (end_time==time_period & censor!=1, 1,
                    ifelse( end_time>time_period, 0, NA)))

# Select relevant variables for clean dataset
df <- df.6 %>%
  select(ID, time_period, Agrace, A, X, W, event, censor, Y)
 
# Export to .csv for sharing
write_csv(df, file="CWC_example.csv")
```
